(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{274:function(t,e,r){t.exports=r.p+"assets/img/MESI_transformation.d36e296d.png"},285:function(t,e,r){"use strict";r.r(e);var a=r(14),i=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"frontmatter-title"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),e("h2",{attrs:{id:"mesi-协议概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mesi-协议概述"}},[t._v("#")]),t._v(" MESI 协议概述")]),t._v(" "),e("p",[t._v("MESI (Modified, Exclusive, Shared, Invalid) 协议是一种用于处理多处理器系统中缓存一致性的协议。它是通过在处理器的缓存行中维护四种状态来解决读写冲突问题的：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Exclusive (独占)"),e("br"),t._v("\n该状态表示当前缓存行中的数据是唯一的，并且没有其他处理器持有该数据的副本。当数据从内存中读取时，它的状态将变为 Exclusive。")])]),t._v(" "),e("li",[e("p",[t._v("Modified (修改)"),e("br"),t._v("\n该状态表示当前缓存行中的数据已被修改，并且没有更新到内存中。当前状态为 Exclusive，当数据被写入时，状态将变为 Modified。")])]),t._v(" "),e("li",[e("p",[t._v("Shared (共享)"),e("br"),t._v("\n该状态表示该缓存行中的数据在多个处理器中都可以访问。当前状态为 Exclusive 或 Modified，当数据被其他处理器读取时，状态将变为 Shared。该状态下的数据必须在内存中可用。")])]),t._v(" "),e("li",[e("p",[t._v("Invalid (无效)"),e("br"),t._v("\n该状态表示该缓存行中的数据不再是最新的，并且不能在该处理器中使用。当前状态为 Shared 时，当数据被其他处理器写入时，状态将变为 Invalid。")])])]),t._v(" "),e("h3",{attrs:{id:"mesi-状态变化过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mesi-状态变化过程"}},[t._v("#")]),t._v(" MESI 状态变化过程：")]),t._v(" "),e("p",[e("img",{attrs:{src:r(274),alt:"MESI_transformation"}})])])}),[],!1,null,null,null);e.default=i.exports}}]);